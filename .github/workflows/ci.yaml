name: CI

on:
    pull_request:
        branches: [main]
    push:
        branches: [main]

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v5

            - name: Setup Node
              uses: actions/setup-node@v5
              with:
                  node-version: 22.x

            - name: Install dependencies
              run: npm ci

            - name: Run eslint
              run: npm run lint:check

    test:
        runs-on: ubuntu-latest
        needs: lint
        env:
            NODE_ENV: test
            PORT: ${{ secrets.PORT }}
            CLIENT_BASE_URL: ${{ secrets.CLIENT_BASE_URL }}
            DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
            JWT_REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
            JWT_REFRESH_TOKEN_EXPIRY: ${{ secrets.REFRESH_TOKEN_EXPIRY }}
            JWT_REFRESH_TOKEN_ISSUER: ${{ secrets.REFRESH_TOKEN_ISSUER }}
            JWT_ACCESS_TOKEN_EXPIRY: ${{ secrets.ACCESS_TOKEN_EXPIRY }}
            JWT_ACCESS_TOKEN_ISSUER: ${{ secrets.ACCESS_TOKEN_ISSUER }}
            JWKS_URI_ENDPOINT: ${{ secrets.JWKS_URI }}
            PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
            ADMIN_FIRSTNAME: ${{ secrets.ADMIN_FIRSTNAME }}
            ADMIN_LASTNAME: ${{ secrets.ADMIN_LASTNAME }}
            ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
            ADMIN_ROLE: ${{ secrets.ADMIN_ROLE }}
            ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
            ADMIN_AGE: ${{ secrets.ADMIN_AGE }}

        steps:
            - uses: actions/checkout@v5

            - name: Setup Node
              uses: actions/setup-node@v5
              with:
                  node-version: 22.x

            - name: Install dependencies
              run: npm ci

            - name: Run Prisma generate
              run: npx prisma generate

            - name: Run Prisma Migrations (deploy)
              run: npx prisma migrate deploy

            - name: Run tests
              run: npm run test

            - name: Generate Coverage Report
              run: npm run coverage

            - name: Upload coverage report
              uses: actions/upload-artifact@v4
              with:
                  name: coverage
                  path: coverage/lcov.info

            - name: Reset database after tests
              if: always() # ensures reset even if tests fail
              run: npx prisma migrate reset --force --skip-generate

    build:
        runs-on: ubuntu-latest
        needs: test
        steps:
            - uses: actions/checkout@v5

            - name: Setup Node
              uses: actions/setup-node@v5
              with:
                  node-version: 22.x

            - name: Install dependencies
              run: npm ci

            - name: Build Project
              run: npm run build

            - name: Upload build artifact
              uses: actions/upload-artifact@v4
              with:
                  name: dist
                  path: dist/

    sonarcloud:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - uses: actions/checkout@v5

            - name: Setup Node
              uses: actions/setup-node@v5
              with:
                  node-version: 22.x

            - name: Install dependencies
              run: npm ci

            - name: Download build artifact
              uses: actions/download-artifact@v4
              with:
                  name: dist
                  path: dist/

            - name: Download coverage report
              uses: actions/download-artifact@v4
              with:
                  name: coverage
                  path: coverage/

            - name: SonarCloud Scan
              uses: SonarSource/sonarqube-scan-action@v5
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
